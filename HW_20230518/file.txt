> Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?

    git checkout
    git checkout -- <filename>       -> отмена изменений в определенном файле
    git checkout -- .                -> отмена изменений во всех файлах в рабочем каталоге

> Как вернуть файл из индекса в рабочий каталог?

    git restore
    git restore --staged <filename>  -> перемещение файла из индекса (staged) обратно в рабочий каталог, отменяя его индексацию
        опция --staged или --cached  -> операция должна быть выполнена для файлов в индексе, а не в рабочем каталоге
    git reset HEAD <filename>        -> сбрасывает состояние индекса (HEAD) для указанного файла, возвращая его в рабочий каталог

> Как отменить ошибочный commit ?

    git revert <commit-id>           -> создает новый коммит, который отменяет изменения, внесенные указанным коммитом (идентификатор (хэш) коммита)
    git reset
    git reset --hard HEAD~1          -> отменяет последний коммит и удаляет его из истории (HEAD~1 -> количество коммитов для отмены)

> Как создать новую ветку и переключится в нее?

    1. git branch                       -> проверить текущую ветку
    2. git branch <branch-name>         -> создание новой ветки с желаемым именем
    3. it checkout <branch-name>        -> переключиться на новую ветку

    *. git switch -c <branch-name>      -> создание и переключение на новую ветку одновременно

> В чем отличение между fast-forward merge and non fast-forfard merge?

    Fast-forward                     -> когда целевая ветка находится на том же коммите, что и сливаемая ветка
                                        (Git просто перемещает указатель целевой ветки без создания дополнительных коммитов)

    Non-fast-forward                 -> когда целевая ветка имеет новые коммиты после отделения от сливаемой ветки
                                        (Git создает дополнительный коммит слияния, который объединяет изменения из обеих веток)

> Когда может возникнуть конфликт слияния веток, как его разрешить?

    1. git merge <branch-name>          -> слить ветки, которые вызывают конфликт
    2. Git покажет информацию о конфликте слияния и список файлов, содержащих конфликты
    3. Редактируйте файлы, чтобы удалить маркеры конфликтов и привести их в нужное состояние
    4. git add <file1> <file2>          -> файлы, которые были изменены и отредактированы в процессе разрешения конфликтов
    5. git commit                       -> Git создаст коммит слияния, включающий разрешенные конфликты

> Можно ли удалить ветку? Как?

    git branch -d <branch-name>             -> Удаление локальной ветки

    git push origin --delete <branch-name>  -> Удаление удаленной ветки (которая уже была опубликована на удаленном репозитории)
